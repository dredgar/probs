#include <bits/stdc++.h>

void c_() { std::cerr << "\033[39;0m" << std::endl; }
template <typename T, typename... Args>
void c_(T a, Args... args) { std::cerr << a << ", "; c_(args...); }
#define ccc(args...) std::cerr << "\033[32;1m" << #args << "  =  ", c_(args)
#define ccd(args...) std::cerr << "\033[32;1m", c_(args)
#define ccf(args...) fprintf(stderr, args)
#define crep(i_, s_, t_) for (int i_ = (s_); i_ <= (t_); ++i_)

#define rep(i_, s_, t_) for (int i_ = (s_); i_ <= (t_); ++i_)
#define re(i_, s_, t_) for (int i_ = (s_); i_ < (t_); ++i_)
#define per(i_, s_, t_) for (int i_ = (s_); i_ >= (t_); --i_)
#define pe(i_, s_, t_) for (int i_ = (s_); i_ > (t_); --i_)
#define go(e_, s_) for (Edge *e_ = (s_); e_; e_ = e_->e)
#define daze << '\n'

typedef long long ll;
typedef const int cint;
typedef const long long cll;
typedef const char cchar;

template <cint I, cint O>
struct IO {
    char gc() { return getchar(); }
    void pc(cchar c) { putchar(c); }
    template <class T>
    IO &operator >> (T &x) {
        char c;
        for (c = gc(); c != '-' && !isdigit(c); c = gc());
        bool f = c == '-';
        x = (f ? gc() : c) - '0';
        for (c = gc(); isdigit(c); c = gc())
            x = x * 10 + (c - '0');
        if (f) x = -x;
        return *this;
    }
    char *gs(char *p) {
        char c;
        for (c = gc(); !isgraph(c); c = gc());
        for (*p++ = c, c = gc(); isgraph(c); *p++ = c, c = gc());
        return *p = 0, p;
    }
    IO &operator >> (char *p) {
        char c;
        for (c = gc(); !isgraph(c); c = gc());
        for (*p++ = c, c = gc(); isgraph(c); *p++ = c, c = gc());
        return *p = 0, *this;
    }
    IO &operator >> (char &c) {
        for (c = gc(); !isgraph(c); c = gc());
        return *this;
    }
    template <class T>
    operator T () { T x; *this >> x; return x; }
    template <class T>
    IO &operator << (T x) {
        static char r[20];
        if (x == 0) return pc('0'), *this;
        if (x < 0) pc('-'), x = -x;
        char *j = r;
        for (T y; x; x = y) y = x / 10, *j++ = x - y * 10 + '0';
        while (j != r) pc(*--j);
        return *this;
    }
    IO &operator << (char *p) {
        while (*p) pc(*p++);
        return *this;
    }
    IO &operator << (cchar *p) {
        while (*p) pc(*p++);
        return *this;
    }
    IO &operator << (cchar x) { return pc(x), *this; }
};
